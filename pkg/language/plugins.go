// Code generated by ./cmd/generate/main.go; DO NOT EDIT.
package language

import "github.com/wakatime/wakatime-cli/pkg/heartbeat"

// Parse parses the language from a plugin specific string.
func Parse(language, plugin string) (heartbeat.Language, bool) {
	switch plugin {
	case "vim":
		return parseVim(language)
	default:
		return parseDefault(language)
	}
}

func parseDefault(language string) (heartbeat.Language, bool) {
	switch language {
	case "actionscript":
		return heartbeat.ParseLanguage("actionscript")
	case "ada":
		return heartbeat.ParseLanguage("ada")
	case "agda":
		return heartbeat.ParseLanguage("agda")
	case "ansible":
		return heartbeat.ParseLanguage("ansible")
	case "apacheconf":
		return heartbeat.ParseLanguage("apacheconf")
	case "applescript":
		return heartbeat.ParseLanguage("applescript")
	case "asp":
		return heartbeat.ParseLanguage("asp")
	case "assembly":
		return heartbeat.ParseLanguage("assembly")
	case "autoconf":
		return heartbeat.ParseLanguage("autoconf")
	case "awk":
		return heartbeat.ParseLanguage("awk")
	case "bash":
		return heartbeat.ParseLanguage("bash")
	case "basic":
		return heartbeat.ParseLanguage("basic")
	case "bat":
		return heartbeat.ParseLanguage("batchscript")
	case "bibtex":
		return heartbeat.ParseLanguage("bibtex")
	case "brightscript":
		return heartbeat.ParseLanguage("brightscript")
	case "c":
		return heartbeat.ParseLanguage("c")
	case "c#":
		return heartbeat.ParseLanguage("csharp")
	case "c++":
		return heartbeat.ParseLanguage("cpp")
	case "clojure":
		return heartbeat.ParseLanguage("clojure")
	case "cocoa":
		return heartbeat.ParseLanguage("cocoa")
	case "coffeescript":
		return heartbeat.ParseLanguage("coffeescript")
	case "coldfusion":
		return heartbeat.ParseLanguage("coldfusion")
	case "coldfusion html":
		return heartbeat.ParseLanguage("coldfusion")
	case "common lisp":
		return heartbeat.ParseLanguage("commonlisp")
	case "coq":
		return heartbeat.ParseLanguage("coq")
	case "cperl":
		return heartbeat.ParseLanguage("cperl")
	case "cshtml":
		return heartbeat.ParseLanguage("cshtml")
	case "css":
		return heartbeat.ParseLanguage("css")
	case "cvs":
		return heartbeat.ParseLanguage("cvs")
	case "dart":
		return heartbeat.ParseLanguage("dart")
	case "dcl":
		return heartbeat.ParseLanguage("dcl")
	case "delphi":
		return heartbeat.ParseLanguage("delphi")
	case "dhall":
		return heartbeat.ParseLanguage("dhall")
	case "diff":
		return heartbeat.ParseLanguage("diff")
	case "doctex":
		return heartbeat.ParseLanguage("doctex")
	case "elixir":
		return heartbeat.ParseLanguage("elixir")
	case "elm":
		return heartbeat.ParseLanguage("elm")
	case "emacs lisp":
		return heartbeat.ParseLanguage("emacslisp")
	case "erlang":
		return heartbeat.ParseLanguage("erlang")
	case "eshell":
		return heartbeat.ParseLanguage("eshell")
	case "f#":
		return heartbeat.ParseLanguage("fsharp")
	case "fish":
		return heartbeat.ParseLanguage("fish")
	case "fortran":
		return heartbeat.ParseLanguage("fortran")
	case "gas":
		return heartbeat.ParseLanguage("assembly")
	case "go":
		return heartbeat.ParseLanguage("go")
	case "gosu":
		return heartbeat.ParseLanguage("gosu")
	case "groovy":
		return heartbeat.ParseLanguage("groovy")
	case "haml":
		return heartbeat.ParseLanguage("haml")
	case "haskell":
		return heartbeat.ParseLanguage("haskell")
	case "haxe":
		return heartbeat.ParseLanguage("haxe")
	case "hcl":
		return heartbeat.ParseLanguage("hcl")
	case "html":
		return heartbeat.ParseLanguage("html")
	case "ini":
		return heartbeat.ParseLanguage("ini")
	case "jade":
		return heartbeat.ParseLanguage("jade")
	case "java":
		return heartbeat.ParseLanguage("java")
	case "javascript":
		return heartbeat.ParseLanguage("javascript")
	case "json":
		return heartbeat.ParseLanguage("json")
	case "jsx":
		return heartbeat.ParseLanguage("jsx")
	case "kotlin":
		return heartbeat.ParseLanguage("kotlin")
	case "latex":
		return heartbeat.ParseLanguage("latex")
	case "ld-script":
		return heartbeat.ParseLanguage("linkerscript")
	case "less":
		return heartbeat.ParseLanguage("less")
	case "lua":
		return heartbeat.ParseLanguage("lua")
	case "makefile":
		return heartbeat.ParseLanguage("makefile")
	case "man":
		return heartbeat.ParseLanguage("man")
	case "markdown":
		return heartbeat.ParseLanguage("markdown")
	case "matlab":
		return heartbeat.ParseLanguage("matlab")
	case "metafont":
		return heartbeat.ParseLanguage("metafont")
	case "metapost":
		return heartbeat.ParseLanguage("metapost")
	case "mustache":
		return heartbeat.ParseLanguage("mustache")
	case "nix":
		return heartbeat.ParseLanguage("nix")
	case "objective-c":
		return heartbeat.ParseLanguage("objective-c")
	case "objective-c++":
		return heartbeat.ParseLanguage("objective-cpp")
	case "objective-j":
		return heartbeat.ParseLanguage("objective-j")
	case "ocaml":
		return heartbeat.ParseLanguage("ocaml")
	case "org":
		return heartbeat.ParseLanguage("org")
	case "pascal":
		return heartbeat.ParseLanguage("pascal")
	case "perl":
		return heartbeat.ParseLanguage("perl")
	case "php":
		return heartbeat.ParseLanguage("php")
	case "powershell":
		return heartbeat.ParseLanguage("powershell")
	case "prolog":
		return heartbeat.ParseLanguage("prolog")
	case "puppet":
		return heartbeat.ParseLanguage("puppet")
	case "purescript":
		return heartbeat.ParseLanguage("purescript")
	case "python":
		return heartbeat.ParseLanguage("python")
	case "r":
		return heartbeat.ParseLanguage("r")
	case "restructuredtext":
		return heartbeat.ParseLanguage("restructuredtext")
	case "ruby":
		return heartbeat.ParseLanguage("ruby")
	case "rust":
		return heartbeat.ParseLanguage("rust")
	case "salt":
		return heartbeat.ParseLanguage("salt")
	case "sass":
		return heartbeat.ParseLanguage("sass")
	case "scala":
		return heartbeat.ParseLanguage("scala")
	case "scheme":
		return heartbeat.ParseLanguage("scheme")
	case "scribe":
		return heartbeat.ParseLanguage("scribe")
	case "scss":
		return heartbeat.ParseLanguage("scss")
	case "sgml":
		return heartbeat.ParseLanguage("sgml")
	case "shell":
		return heartbeat.ParseLanguage("shell")
	case "simula":
		return heartbeat.ParseLanguage("simula")
	case "slim":
		return heartbeat.ParseLanguage("slim")
	case "smalltalk":
		return heartbeat.ParseLanguage("smalltalk")
	case "smime":
		return heartbeat.ParseLanguage("smime")
	case "sql":
		return heartbeat.ParseLanguage("sql")
	case "swift":
		return heartbeat.ParseLanguage("swift")
	case "tex":
		return heartbeat.ParseLanguage("tex")
	case "text":
		return heartbeat.ParseLanguage("text")
	case "turing":
		return heartbeat.ParseLanguage("turing")
	case "twig":
		return heartbeat.ParseLanguage("twig")
	case "typescript":
		return heartbeat.ParseLanguage("typescript")
	case "typoscript":
		return heartbeat.ParseLanguage("typoscript")
	case "vb.net":
		return heartbeat.ParseLanguage("vb.net")
	case "verilog":
		return heartbeat.ParseLanguage("verilog")
	case "vhdl":
		return heartbeat.ParseLanguage("vhdl")
	case "viml":
		return heartbeat.ParseLanguage("viml")
	case "xaml":
		return heartbeat.ParseLanguage("xaml")
	case "xml":
		return heartbeat.ParseLanguage("xml")
	case "yaml":
		return heartbeat.ParseLanguage("yaml")
	default:
		return heartbeat.LanguageUnknown, false
	}
}

func parseVim(language string) (heartbeat.Language, bool) {
	switch language {
	case "a65":
		return heartbeat.ParseLanguage("assembly")
	case "asm":
		return heartbeat.ParseLanguage("assembly")
	case "asm68k":
		return heartbeat.ParseLanguage("assembly")
	case "asmh8300":
		return heartbeat.ParseLanguage("assembly")
	case "basic":
		return heartbeat.ParseLanguage("basic")
	case "c":
		return heartbeat.ParseLanguage("c")
	case "cpp":
		return heartbeat.ParseLanguage("cpp")
	case "crontab":
		return heartbeat.ParseLanguage("crontab")
	case "cs":
		return heartbeat.ParseLanguage("csharp")
	case "haml":
		return heartbeat.ParseLanguage("haml")
	case "haskell":
		return heartbeat.ParseLanguage("haskell")
	case "html":
		return heartbeat.ParseLanguage("html")
	case "htmlcheetah":
		return heartbeat.ParseLanguage("html")
	case "htmldjango":
		return heartbeat.ParseLanguage("html")
	case "htmlm4":
		return heartbeat.ParseLanguage("html")
	case "java":
		return heartbeat.ParseLanguage("java")
	case "javascript":
		return heartbeat.ParseLanguage("javascript")
	case "lhaskell":
		return heartbeat.ParseLanguage("haskell")
	case "markdown":
		return heartbeat.ParseLanguage("markdown")
	case "objc":
		return heartbeat.ParseLanguage("objectivec")
	case "objcpp":
		return heartbeat.ParseLanguage("objectivecpp")
	case "ocaml":
		return heartbeat.ParseLanguage("ocaml")
	case "perl":
		return heartbeat.ParseLanguage("perl")
	case "perl6":
		return heartbeat.ParseLanguage("perl")
	case "php":
		return heartbeat.ParseLanguage("php")
	case "phtml":
		return heartbeat.ParseLanguage("php")
	case "prolog":
		return heartbeat.ParseLanguage("prolog")
	case "python":
		return heartbeat.ParseLanguage("python")
	case "r":
		return heartbeat.ParseLanguage("r")
	case "ruby":
		return heartbeat.ParseLanguage("ruby")
	case "sass":
		return heartbeat.ParseLanguage("sass")
	case "scheme":
		return heartbeat.ParseLanguage("scheme")
	case "scss":
		return heartbeat.ParseLanguage("scss")
	case "skill":
		return heartbeat.ParseLanguage("skill")
	case "vb":
		return heartbeat.ParseLanguage("vbnet")
	case "vim":
		return heartbeat.ParseLanguage("viml")
	case "xhtml":
		return heartbeat.ParseLanguage("html")
	case "xml":
		return heartbeat.ParseLanguage("xml")
	case "yaml":
		return heartbeat.ParseLanguage("yaml")
	default:
		return heartbeat.LanguageUnknown, false
	}
}
