package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"
	"strings"
	"text/template"
)

const (
	pluginFolder = "pkg/language/plugins"
	outputFile   = "pkg/language/plugins.go"
	// languageMappingFile = "pkg/language/languagevim/vim.json"
)

func main() {
	os.Exit(generate())
}

// generate generates go language code for plugin language parsing from templates.
func generate() int {
	files, err := ioutil.ReadDir(pluginFolder)
	if err != nil {
		fmt.Printf("failed to read plugin folder %q: %s\n", pluginFolder, err)
		return 1
	}

	var context Context

	for _, file := range files {
		filepath := fmt.Sprintf("%s/%s", pluginFolder, file.Name())
		data, err := ioutil.ReadFile(filepath)
		if err != nil {
			fmt.Printf("failed to read plugin file %q: %s\n", filepath, err)
			return 1
		}

		var languageMapping map[string]string

		err = json.Unmarshal(data, &languageMapping)
		if err != nil {
			fmt.Printf("failed to unmarshal data from plugin file %q: %s\n", filepath, err)
			return 1
		}

		pluginName := strings.Split(file.Name(), ".")[0]

		if pluginName == "default" {
			context.Default = languageMapping
			continue
		}

		context.Plugins = append(context.Plugins, Plugin{
			Name:    pluginName,
			Title:   strings.Title(pluginName),
			Mapping: languageMapping,
		})
	}

	if context.Default == nil {
		fmt.Printf("Could not find default mapping. File 'default.json' not found in %q\n", pluginFolder)
		return 1
	}

	f, err := os.OpenFile(outputFile, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
	if err != nil {
		fmt.Printf("opening output file %s failed: %s\n", outputFile, err)
		return 1
	}
	defer f.Close()

	err = tpl.Execute(f, context)
	if err != nil {
		fmt.Printf("executing text template failed: %s\n", err)
		return 1
	}

	return 0
}

type Context struct {
	Plugins []Plugin
	Default PluginMapping
}

type Plugin struct {
	Name    string
	Title   string
	Mapping PluginMapping
}

type PluginMapping map[string]string

// nolint: gochecknoglobals
var tpl = template.Must(template.New("").Parse(`// Code generated by ./cmd/generate/main.go; DO NOT EDIT.
package language

import "github.com/wakatime/wakatime-cli/pkg/heartbeat"

func Parse(language, plugin string) (heartbeat.Language, bool) {
	switch plugin {
	{{ range .Plugins }}case "{{ .Name }}":
		return parse{{ .Title }}(language)
	{{ end }}default:
		return parseDefault(language)
	}
}

func parseDefault(language string) (heartbeat.Language, bool) {
	switch language {
 	{{ range $key, $value := .Default }}case "{{ $key }}":
 		return heartbeat.{{ $value }}, true
 	{{ end }}default:
 		return heartbeat.LanguageUnknown, false
 	}
}

{{ range .Plugins }}func parse{{ .Title }}(language string) (heartbeat.Language, bool) {
	switch language {
 	{{ range $key, $value := .Mapping }}case "{{ $key }}":
 		return heartbeat.{{ $value }}, true
 	{{ end }}default:
 		return heartbeat.LanguageUnknown, false
 	}
}
{{ end }}`))
